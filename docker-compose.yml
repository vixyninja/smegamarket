version: '3.1'
services:
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - docker-nest-postgres:/var/lib/postgresql/data

  api-client:
    container_name: api-client
    build:
      dockerfile: Dockerfile
      context: .
      target: development
    restart: always
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - ${PORT}:${PORT}
    command: npm run start:dev
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  redis:
    container_name: redis
    image: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis:/data
    restart: always
    environment:
      REDIS_HOST: ${REDIS_HOST}

  adminer:
    container_name: adminer
    image: adminer
    volumes:
      - adminer:/sessions
    restart: always
    ports:
      - ${ADMINER_PORT}:${ADMINER_PORT}
    depends_on:
      - postgres
    environment:
      ADMINER_PLUGINS: tables-filter tinymce
      ADMINER_DESIGN: pepa-linha

volumes:
  api-client:
    name: vapi-client
    driver: local
  docker-nest-postgres:
    name: vdocker-nest-postgres
    driver: local
  adminer:
    name: vadminer
    driver: local
  redis:
    name: vredis
    driver: local
